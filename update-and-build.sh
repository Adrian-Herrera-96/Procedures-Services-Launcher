#!/bin/bash

set -e

# Obtener subm√≥dulos desde .gitmodules
submodules=($(grep 'path = ' .gitmodules | awk '{print $3}'))

# Mostrar subm√≥dulos
echo ""
echo "Subm√≥dulos disponibles:"
for i in "${!submodules[@]}"; do
  echo "  $((i+1)). ${submodules[$i]}"
done
echo "  0. Todos"

# Solicitar opci√≥n
read -p $'\nSeleccione un subm√≥dulo para actualizar (por n√∫mero): ' selection

# Validar opci√≥n
if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 0 ] && [ "$selection" -le "${#submodules[@]}" ]; then
  if [ "$selection" -eq 0 ]; then
    selected=("${submodules[@]}")
    build_all=true
  else
    selected=("${submodules[$((selection-1))]}")
    build_all=false
  fi
else
  echo "‚ùå Opci√≥n inv√°lida."
  exit 1
fi

# Actualizar subm√≥dulos seleccionados
echo -e "\nüîÑ Actualizando subm√≥dulos..."
for sub in "${selected[@]}"; do
  echo "üì¶ $sub"
  (cd "$sub" && git checkout main && git pull origin main)
done

# Construir solo si es uno solo
if [ "$build_all" = false ]; then
  sub="${selected[0]}"
  service=$(echo "$sub" | tr '[:upper:]' '[:lower:]')

  echo -e "\nüß± Ejecutando 'yarn build' en el contenedor: $service"
  docker compose exec "$service" yarn build

  echo -e "\nüîÅ Reiniciando contenedor: $service"
  docker compose restart "$service"

else
  echo -e "\nüß± Ejecutando 'yarn build' en TODOS los servicios activos..."
  running_services=($(docker compose ps --services --filter status=running))
  for service in "${running_services[@]}"; do
    echo "üîß $service"
    docker compose exec "$service" yarn build
    docker compose restart "$service"
  done
fi

echo -e "\n‚úÖ Proceso completo."
